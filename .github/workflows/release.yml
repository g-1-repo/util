name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  release-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Full CI pipeline
      run: bun run perf

    - name: Generate detailed bundle report
      run: |
        echo "# 📦 Release Bundle Report" > bundle-report.md
        echo "" >> bundle-report.md
        echo "**Version:** ${{ github.ref_name }}" >> bundle-report.md
        echo "**Date:** $(date -u)" >> bundle-report.md
        echo "" >> bundle-report.md
        echo "## Bundle Analysis" >> bundle-report.md
        echo "\`\`\`" >> bundle-report.md
        bun run analyze:report >> bundle-report.md
        echo "\`\`\`" >> bundle-report.md
        echo "" >> bundle-report.md
        echo "## Package Structure" >> bundle-report.md
        echo "\`\`\`" >> bundle-report.md
        du -h dist/* | sort -hr >> bundle-report.md
        echo "\`\`\`" >> bundle-report.md

    - name: Upload bundle report
      uses: actions/upload-artifact@v4
      with:
        name: bundle-report-${{ github.ref_name }}
        path: bundle-report.md

    - name: Bundle size regression check
      run: |
        # Check bundle sizes against targets
        main_size=$(stat -c%s dist/index.js)
        if [ $main_size -gt 25000 ]; then
          echo "❌ Main bundle ($main_size bytes) exceeds 25KB limit!"
          exit 1
        fi
        
        # Check individual modules
        for module in dist/*/index.js; do
          if [ -f "$module" ]; then
            size=$(stat -c%s "$module")
            if [ $size -gt 5000 ]; then
              echo "❌ Module $module ($size bytes) exceeds 5KB limit!"
              exit 1
            fi
          fi
        done
        
        echo "✅ All bundle size checks passed!"

    - name: Performance benchmarks
      run: |
        echo "## Release Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Build performance
        start=$(date +%s%3N)
        bun run build
        end=$(date +%s%3N)
        build_time=$((end - start))
        
        # Test performance
        start=$(date +%s%3N)
        bun run test:ci
        end=$(date +%s%3N)
        test_time=$((end - start))
        
        echo "| Metric | Value | Target |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | ${build_time}ms | <5000ms |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Time | ${test_time}ms | <200ms |" >> $GITHUB_STEP_SUMMARY
        echo "| Main Bundle | $(stat -c%s dist/index.js)B | <25KB |" >> $GITHUB_STEP_SUMMARY
        echo "| Total Dist | $(du -b dist | tail -1 | cut -f1)B | N/A |" >> $GITHUB_STEP_SUMMARY

  publish:
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build
      run: bun run build

    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}